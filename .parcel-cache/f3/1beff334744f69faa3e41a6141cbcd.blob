"use strict";
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require('./../utils.js');
var _utilsJsDefault = _parcelHelpers.interopDefault(_utilsJs);
var _platformIndexJs = require('../platform/index.js');
var _platformIndexJsDefault = _parcelHelpers.interopDefault(_platformIndexJs);
exports.default = _platformIndexJsDefault.default.isStandardBrowserEnv ? // Standard browser envs support document.cookie
(function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      const cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));
      if (_utilsJsDefault.default.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }
      if (_utilsJsDefault.default.isString(path)) {
        cookie.push('path=' + path);
      }
      if (_utilsJsDefault.default.isString(domain)) {
        cookie.push('domain=' + domain);
      }
      if (secure === true) {
        cookie.push('secure');
      }
      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
})() : // Non standard browser env (web workers, react-native) lack needed support.
(function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
})();
