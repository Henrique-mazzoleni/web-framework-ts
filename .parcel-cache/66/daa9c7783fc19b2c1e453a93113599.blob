"use strict";
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require('../utils.js');
var _utilsJsDefault = _parcelHelpers.interopDefault(_utilsJs);
var _coreAxiosErrorJs = require('../core/AxiosError.js');
var _coreAxiosErrorJsDefault = _parcelHelpers.interopDefault(_coreAxiosErrorJs);
var _transitionalJs = require('./transitional.js');
var _transitionalJsDefault = _parcelHelpers.interopDefault(_transitionalJs);
var _helpersToFormDataJs = require('../helpers/toFormData.js');
var _helpersToFormDataJsDefault = _parcelHelpers.interopDefault(_helpersToFormDataJs);
var _helpersToURLEncodedFormJs = require('../helpers/toURLEncodedForm.js');
var _helpersToURLEncodedFormJsDefault = _parcelHelpers.interopDefault(_helpersToURLEncodedFormJs);
var _platformIndexJs = require('../platform/index.js');
var _platformIndexJsDefault = _parcelHelpers.interopDefault(_platformIndexJs);
var _helpersFormDataToJSONJs = require('../helpers/formDataToJSON.js');
var _helpersFormDataToJSONJsDefault = _parcelHelpers.interopDefault(_helpersFormDataToJSONJs);
const DEFAULT_CONTENT_TYPE = {
  'Content-Type': undefined
};
/**
* It takes a string, tries to parse it, and if it fails, it returns the stringified version
* of the input
*
* @param {any} rawValue - The value to be stringified.
* @param {Function} parser - A function that parses a string into a JavaScript object.
* @param {Function} encoder - A function that takes a value and returns a string.
*
* @returns {string} A stringified version of the rawValue.
*/
function stringifySafely(rawValue, parser, encoder) {
  if (_utilsJsDefault.default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return _utilsJsDefault.default.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
const defaults = {
  transitional: _transitionalJsDefault.default,
  adapter: ['xhr', 'http'],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = _utilsJsDefault.default.isObject(data);
    if (isObjectPayload && _utilsJsDefault.default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData = _utilsJsDefault.default.isFormData(data);
    if (isFormData) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify(_helpersFormDataToJSONJsDefault.default(data)) : data;
    }
    if (_utilsJsDefault.default.isArrayBuffer(data) || _utilsJsDefault.default.isBuffer(data) || _utilsJsDefault.default.isStream(data) || _utilsJsDefault.default.isFile(data) || _utilsJsDefault.default.isBlob(data)) {
      return data;
    }
    if (_utilsJsDefault.default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (_utilsJsDefault.default.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }
    let isFileList;
    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return _helpersToURLEncodedFormJsDefault.default(data, this.formSerializer).toString();
      }
      if ((isFileList = _utilsJsDefault.default.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;
        return _helpersToFormDataJsDefault.default(isFileList ? {
          'files[]': data
        } : data, _FormData && new _FormData(), this.formSerializer);
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';
    if (data && _utilsJsDefault.default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw _coreAxiosErrorJsDefault.default.from(e, _coreAxiosErrorJsDefault.default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
  * A timeout in milliseconds to abort a request. If set to 0 (default) a
  * timeout is not created.
  */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: _platformIndexJsDefault.default.classes.FormData,
    Blob: _platformIndexJsDefault.default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};
_utilsJsDefault.default.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
_utilsJsDefault.default.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = _utilsJsDefault.default.merge(DEFAULT_CONTENT_TYPE);
});
exports.default = defaults;
