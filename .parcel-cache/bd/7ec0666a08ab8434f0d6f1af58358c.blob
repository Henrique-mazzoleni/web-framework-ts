"use strict";
var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _utilsJs = require('../utils.js');
var _utilsJsDefault = _parcelHelpers.interopDefault(_utilsJs);
var _coreAxiosErrorJs = require('../core/AxiosError.js');
var _coreAxiosErrorJsDefault = _parcelHelpers.interopDefault(_coreAxiosErrorJs);
var _platformNodeClassesFormDataJs = require('../platform/node/classes/FormData.js');
var _platformNodeClassesFormDataJsDefault = _parcelHelpers.interopDefault(_platformNodeClassesFormDataJs);
var Buffer = require("buffer").Buffer;
/**
* Determines if the given thing is a array or js object.
*
* @param {string} thing - The object or array to be visited.
*
* @returns {boolean}
*/
function isVisitable(thing) {
  return _utilsJsDefault.default.isPlainObject(thing) || _utilsJsDefault.default.isArray(thing);
}
/**
* It removes the brackets from the end of a string
*
* @param {string} key - The key of the parameter.
*
* @returns {string} the key without the brackets.
*/
function removeBrackets(key) {
  return _utilsJsDefault.default.endsWith(key, '[]') ? key.slice(0, -2) : key;
}
/**
* It takes a path, a key, and a boolean, and returns a string
*
* @param {string} path - The path to the current key.
* @param {string} key - The key of the current object being iterated over.
* @param {string} dots - If true, the key will be rendered with dots instead of brackets.
*
* @returns {string} The path to the current key.
*/
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}
/**
* If the array is an array and none of its elements are visitable, then it's a flat array.
*
* @param {Array<any>} arr - The array to check
*
* @returns {boolean}
*/
function isFlatArray(arr) {
  return _utilsJsDefault.default.isArray(arr) && !arr.some(isVisitable);
}
const predicates = _utilsJsDefault.default.toFlatObject(_utilsJsDefault.default, {}, null, function filter(prop) {
  return (/^is[A-Z]/).test(prop);
});
/**
* Convert a data object to FormData
*
* @param {Object} obj
* @param {?Object} [formData]
* @param {?Object} [options]
* @param {Function} [options.visitor]
* @param {Boolean} [options.metaTokens = true]
* @param {Boolean} [options.dots = false]
* @param {?Boolean} [options.indexes = false]
*
* @returns {Object}
**/
/**
* It converts an object into a FormData object
*
* @param {Object<any, any>} obj - The object to convert to form data.
* @param {string} formData - The FormData object to append to.
* @param {Object<string, any>} options
*
* @returns
*/
function toFormData(obj, formData, options) {
  if (!_utilsJsDefault.default.isObject(obj)) {
    throw new TypeError('target must be an object');
  }
  // eslint-disable-next-line no-param-reassign
  formData = formData || new (_platformNodeClassesFormDataJsDefault.default || FormData)();
  // eslint-disable-next-line no-param-reassign
  options = _utilsJsDefault.default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !_utilsJsDefault.default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && _utilsJsDefault.default.isSpecCompliantForm(formData);
  if (!_utilsJsDefault.default.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }
  function convertValue(value) {
    if (value === null) return '';
    if (_utilsJsDefault.default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && _utilsJsDefault.default.isBlob(value)) {
      throw new _coreAxiosErrorJsDefault.default('Blob is not supported. Use a Buffer instead.');
    }
    if (_utilsJsDefault.default.isArrayBuffer(value) || _utilsJsDefault.default.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  /**
  * Default visitor.
  *
  * @param {*} value
  * @param {String|Number} key
  * @param {Array<String|Number>} path
  * @this {FormData}
  *
  * @returns {boolean} return true to visit the each prop of the value recursively
  */
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === 'object') {
      if (_utilsJsDefault.default.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (_utilsJsDefault.default.isArray(value) && isFlatArray(value) || (_utilsJsDefault.default.isFileList(value) || _utilsJsDefault.default.endsWith(key, '[]')) && (arr = _utilsJsDefault.default.toArray(value))) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(_utilsJsDefault.default.isUndefined(el) || el === null) && formData.append(// eslint-disable-next-line no-nested-ternary
          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + '[]', convertValue(el));
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (_utilsJsDefault.default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }
    stack.push(value);
    _utilsJsDefault.default.forEach(value, function each(el, key) {
      const result = !(_utilsJsDefault.default.isUndefined(el) || el === null) && visitor.call(formData, el, _utilsJsDefault.default.isString(key) ? key.trim() : key, path, exposedHelpers);
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!_utilsJsDefault.default.isObject(obj)) {
    throw new TypeError('data must be an object');
  }
  build(obj);
  return formData;
}
exports.default = toFormData;
