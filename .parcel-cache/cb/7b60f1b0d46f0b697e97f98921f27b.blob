var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _classesURLSearchParamsJs = require('./classes/URLSearchParams.js');
var _classesURLSearchParamsJsDefault = _parcelHelpers.interopDefault(_classesURLSearchParamsJs);
var _classesFormDataJs = require('./classes/FormData.js');
var _classesFormDataJsDefault = _parcelHelpers.interopDefault(_classesFormDataJs);
var _classesBlobJs = require('./classes/Blob.js');
var _classesBlobJsDefault = _parcelHelpers.interopDefault(_classesBlobJs);
/**
* Determine if we're running in a standard browser environment
*
* This allows axios to run in a web worker, and react-native.
* Both environments support XMLHttpRequest, but not fully standard globals.
*
* web workers:
*  typeof window -> undefined
*  typeof document -> undefined
*
* react-native:
*  navigator.product -> 'ReactNative'
* nativescript
*  navigator.product -> 'NativeScript' or 'NS'
*
* @returns {boolean}
*/
const isStandardBrowserEnv = (() => {
  let product;
  if (typeof navigator !== 'undefined' && ((product = navigator.product) === 'ReactNative' || product === 'NativeScript' || product === 'NS')) {
    return false;
  }
  return typeof window !== 'undefined' && typeof document !== 'undefined';
})();
/**
* Determine if we're running in a standard browser webWorker environment
*
* Although the `isStandardBrowserEnv` method indicates that
* `allows axios to run in a web worker`, the WebWorker will still be
* filtered out due to its judgment standard
* `typeof window !== 'undefined' && typeof document !== 'undefined'`.
* This leads to a problem when axios post `FormData` in webWorker
*/
const isStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== 'undefined' && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === 'function';
})();
exports.default = {
  isBrowser: true,
  classes: {
    URLSearchParams: _classesURLSearchParamsJsDefault.default,
    FormData: _classesFormDataJsDefault.default,
    Blob: _classesBlobJsDefault.default
  },
  isStandardBrowserEnv,
  isStandardBrowserWebWorkerEnv,
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
};
